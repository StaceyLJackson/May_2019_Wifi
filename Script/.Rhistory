(x>=-30 & x<=0)
})
high_value<-which(high_value, arr.ind = TRUE)
high_value<-as.data.frame(high_value)
high_value%>%distinct(row,.keep_all = TRUE)
View(high_value)
View(high_value)
high_value <- sapply(trainingData1[,c(1:465)], function(x){
(x>=-30 & x<=0)
})
high_value<-which(high_value, arr.ind = TRUE)
high_value<-as.data.frame(high_value)
high_value%>%distinct(row,.keep_all = FALSE)
View(high_value)
View(high_value)
PHONE_list <- c()
for (i in 1:length(trainingData1)){
for (a in 1: length(high_value)){
if (rownames(trainingData1[i])==high_value[a,1]){
PHONE_list<-trainingData1[i,473]
}
}
}
high_value <- sapply(trainingData1[,c(1:465,473)], function(x){
(x>=-30 & x<=0)
})
high_value<-which(high_value, arr.ind = TRUE)
high_value<-as.data.frame(high_value)
View(high_value)
View(high_value)
semi_join(trainingData1,high_value)
semi_join(rownames(trainingData1),high_value$row)
phone_list <- sapply(trainingData1, function(x){
(x=high_value[,1])
})
which(phone_list, arr.ind = TRUE)
phone_list
phone_list <- sapply(trainingData1, function(x){
(x=high_value[,1])
})
phone_list
View(high_value)
View(high_value)
P<-ggplot(trainingData1, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
#create separate training datasets for each building and plot longitude & latitude showing each floor
trainingDataBuilding0<-trainingData1%>%
filter(BUILDINGID==0)
P<-ggplot(trainingDataBuilding0, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
trainingDataBuilding1<-trainingData1%>%
filter(BUILDINGID==1)
P<-ggplot(trainingDataBuilding1, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
trainingDataBuilding2<-trainingData1%>%
filter(BUILDINGID==2)
P<-ggplot(trainingDataBuilding2, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
variance <- sapply(trainingData1[,c(1:465)], var)
low_variance_WAP <- sapply(variance, function(x){
(x<5)
})
which(low_variance_WAP, arr.ind = TRUE)
low_variance_WAP<- as.data.frame(low_variance_WAP)
indices2<-low_variance_WAP[,1]
trainingData1<- trainingData1[(indices2)]
variance <- sapply(trainingData1[,c(1:465)], var)
trainingData<-read.csv(file="/Users/staceyjackson/Dropbox (Personal)/Ubiqum/May_2019_Wifi/Dataset/UJIndoorLoc/trainingData.csv", header=TRUE, sep=",")
validationData<-read.csv(file="/Users/staceyjackson/Dropbox (Personal)/Ubiqum/May_2019_Wifi/Dataset/UJIndoorLoc/validationData.csv", header=TRUE, sep=",")
trainingData[,columns] <- lapply(trainingData[,columns], as.factor)
validationData[,columns] <- lapply(validationData[,columns], as.factor)
trainingData$TIMESTAMP <- as.POSIXct(trainingData$TIMESTAMP,origin="1970-01-01")
validationData$TIMESTAMP <- as.POSIXct(validationData$TIMESTAMP,origin="1970-01-01")
trainingDataMEAN <- 0
for (col in 1:522) {
trainingDataMEAN[col] <- mean(trainingData[,col])
}
trainingDataMEAN <- as.data.frame(trainingDataMEAN)
#remove WAPs with mean=100
trainingData1<-trainingData[,-c(3,4,92,93,94,95,152,158,159,160,215,217,226,227,238,239,240,241,242,243,244,245,246,247,254,293,296,301,303,304,307,333,349,353,360,365,416,419,423,429,433,438,441,442,444,445,451,458,482,485,487,488,491,497,520)]
phones <- split(trainingData1, trainingData1$PHONEID)
sapply(phones, function(x) {
colMeans(x[, c(1:50)])
})
sapply(phones, var)
sapply(phones, var)
variance <- sapply(trainingData1[,c(1:465)], var)
low_variance_WAP <- sapply(variance, function(x){
(x>5)
})
which(low_variance_WAP, arr.ind = TRUE)
low_variance_WAP<- as.data.frame(low_variance_WAP)
indices2<-low_variance_WAP[,1]
trainingData1<- trainingData1[(indices2)]
change_WAP_value <- apply(trainingData1[,c(1:465)], 2, function(x) {ifelse(x == 100, -105, x)})
change_WAP_value <- apply(trainingData1[,c(1:439)], 2, function(x) {ifelse(x == 100, -105, x)})
#if WAP value is 100 change to -105
trainingData1 <- apply(trainingData1[,c(1:439)], 2, function(x) {ifelse(x == 100, -105, x)})
#Upload the files
trainingData<-read.csv(file="/Users/staceyjackson/Dropbox (Personal)/Ubiqum/May_2019_Wifi/Dataset/UJIndoorLoc/trainingData.csv", header=TRUE, sep=",")
validationData<-read.csv(file="/Users/staceyjackson/Dropbox (Personal)/Ubiqum/May_2019_Wifi/Dataset/UJIndoorLoc/validationData.csv", header=TRUE, sep=",")
trainingData$TIMESTAMP <- as.POSIXct(trainingData$TIMESTAMP,origin="1970-01-01")
validationData$TIMESTAMP <- as.POSIXct(validationData$TIMESTAMP,origin="1970-01-01")
trainingDataMEAN <- 0
for (col in 1:522) {
trainingDataMEAN[col] <- mean(trainingData[,col])
}
trainingDataMEAN <- as.data.frame(trainingDataMEAN)
#remove WAPs with mean=100
trainingData1<-trainingData[,-c(3,4,92,93,94,95,152,158,159,160,215,217,226,227,238,239,240,241,242,243,244,245,246,247,254,293,296,301,303,304,307,333,349,353,360,365,416,419,423,429,433,438,441,442,444,445,451,458,482,485,487,488,491,497,520)]
phones <- split(trainingData1, trainingData1$PHONEID)
sapply(phones, function(x) {
colMeans(x[, c(1:50)])
})
sapply(phones, var)
variance <- sapply(trainingData1[,c(1:465)], var)
low_variance_WAP <- sapply(variance, function(x){
(x>5)
})
which(low_variance_WAP, arr.ind = TRUE)
low_variance_WAP<- as.data.frame(low_variance_WAP)
indices2<-low_variance_WAP[,1]
trainingData1<- trainingData1[(indices2)]
variance <- sapply(trainingData1[,c(1:465)], var)
View(trainingData1)
View(trainingDataBuilding0)
colnames(trainingData1)
variance <- sapply(trainingData1[,c(1:430)], var)
low_variance_WAP <- sapply(variance, function(x){
(x>5)
})
which(low_variance_WAP, arr.ind = TRUE)
low_variance_WAP<- as.data.frame(low_variance_WAP)
indices2<-low_variance_WAP[,1]
trainingData1<- trainingData1[(indices2)]
WAP_value_change <- apply(trainingData1[,c(1:430)], 2, function(x) {ifelse(x == 100, -105, x)})
WAP_value_change<- as.data.frame(WAP_value_change)
indices3<-WAP_value_change[,1]
trainingData1<-trainingData1[(indices3)]
#if WAP value is 100 change to -105
WAP_value_change <- apply(trainingData1[,c(1:430)], 2, function(x) {ifelse(x == 100, -105, x)})
WAP_value_change
WAP_value_change <- apply(trainingData1[,c(1:430)], 2, function(x) {ifelse(x == 100, -105, x)})
WAP_value_change<- as.data.frame(WAP_value_change)
indices3<-WAP_value_change[1,]
trainingData1<-trainingData1[(indices3)]
indices3<-WAP_value_change[,1]
indices3
indices2
#if WAP value is 100 change to -105
trainingData1 <- apply(trainingData1[,c(1:430)], 2, function(x) {ifelse(x == 100, -105, x)})
#if WAP value is 100 change to -105
trainingData1 <- as.data.frame(apply(trainingData1[,c(1:430)], 2, function(x) {ifelse(x == 100, -105, x)}))
means<-0
for (i in 1:530){
means[i]<-mean(trainingData1[,i])
}
means<-0
for (i in 1:430){
means[i]<-mean(trainingData1[,i])
}
means
plot(means)
high_value <- as.data.frame(sapply(trainingData1[,c(1:430)], function(x){
(x>=-30 & x<=0)
})
)
high_value
trainingData1_mean<-apply(trainingData1[,c(1:430), 2, mean])
trainingData1_mean<-apply(trainingData1[,c(1:430), 2, function(x), mean])
trainingData1_mean<-apply(trainingData1[,c(1:430), 2, function(x) mean])
trainingData1_mean
trainingData1_mean<-apply(trainingData1[,c(1:430), 2, function(x) mean])
trainingData1_mean<-apply(trainingData1[,c(1:430), 2, mean])
trainingData1_mean<-apply(trainingData1[,c(1:430)], 2, mean)
trainingData1_mean
trainingData1_mean<-apply(trainingData1[,c(1:424)], 2, mean)
trainingData1_mean
trainingData1_mean<-apply(trainingData1[,c(1:424)], 2, sd)
trainingData1_sd<-apply(trainingData1[,c(1:424)], 2, sd)
trainingData1_sd
if(require("pacman")=="FALSE"){
install.packages('pacman')
library('pacman')
pacman::p_load(here, readxl, plyr, caret, dplyr, doParallel,
lubridate, corrplot, ggplot2,
tidyverse, arules, arulesViz, rstudioapi,RMySQL,
plotly, padr, lubridate, forecast,zoo)
} else {
library('pacman')
pacman::p_load(here, readxl, plyr, caret, dplyr, doParallel,
lubridate, corrplot, ggplot2,
tidyverse, arules, arulesViz, rstudioapi,RMySQL,
plotly, padr, lubridate, forecast,zoo)
}
#Upload the files
trainingData<-read.csv(file="/Users/staceyjackson/Dropbox (Personal)/Ubiqum/May_2019_Wifi/Dataset/UJIndoorLoc/trainingData.csv", header=TRUE, sep=",")
validationData<-read.csv(file="/Users/staceyjackson/Dropbox (Personal)/Ubiqum/May_2019_Wifi/Dataset/UJIndoorLoc/validationData.csv", header=TRUE, sep=",")
#Look at the classes
str(trainingData)
sapply(trainingData, class)
#change 526-528 to factors
columns <- c(526:528)
trainingData[,columns] <- lapply(trainingData[,columns], as.factor)
validationData[,columns] <- lapply(validationData[,columns], as.factor)
sapply(trainingData,class)
sapply(validationData,class)
#change time to POSixt
trainingData$TIMESTAMP <- as.POSIXct(trainingData$TIMESTAMP,origin="1970-01-01")
validationData$TIMESTAMP <- as.POSIXct(validationData$TIMESTAMP,origin="1970-01-01")
#Some plots
plot(trainingData$BUILDINGID)
plot(trainingData$USERID)
plot(trainingData$SPACEID)
p <- ggplot(data = trainingData, mapping = aes(x =USERID, y=PHONEID))
p + geom_point()
p <- ggplot(data = validationData, mapping = aes(x =LONGITUDE, y=LATITUDE))
p + geom_point()
summary(trainingData[,523:529])
summary(validationData[,523:529])
#create new column for location in training set
trainingData$Location <- (trainingData$SPACEID*100 +trainingData$FLOOR*10 +trainingData$BUILDINGID)
#create new column for location in validaiton set
validationData$Location <- (validationData$SPACEID*100 +validationData$FLOOR*10 +validationData$BUILDINGID)
trainingData$Location<-(stringr::str_pad(trainingData$Location, 5, pad = "0"))
validationData$Location<-(stringr::str_pad(validationData$Location, 5, pad = "0"))
#find means of the WAPs
trainingDataMEAN <- 0
for (col in 1:522) {
trainingDataMEAN[col] <- mean(trainingData[,col])
}
trainingDataMEAN <- as.data.frame(trainingDataMEAN)
#remove WAPs with mean=100
trainingData1<-trainingData[,-c(3,4,92,93,94,95,152,158,159,160,215,217,226,227,238,239,240,241,242,243,244,245,246,247,254,293,296,301,303,304,307,333,349,353,360,365,416,419,423,429,433,438,441,442,444,445,451,458,482,485,487,488,491,497,520)]
#Empty the no WAPs means (location, phoneID...)
#means[1:11]<-0
#means<-as.data.frame(means)
#can also be done with the function apply
#means<-apply(training[11:530], 2, mean)
#means<-as.data.frame(means)
#delete all the WAPs with a mean of =100
#indices<-c()
#for (i in 11:530){
# if(means[i,]==100){
#   indices[i]<- i
# }
#}
#training2<- training[is.na(indices)]
#find phones with weak signals
phones <- split(trainingData1, trainingData1$PHONEID)
sapply(phones, function(x) {
colMeans(x[, c(1:50)])
})
#variance of the phones
sapply(phones, var)
#WAPs with low variance
variance <- sapply(trainingData1[,c(1:430)], var)
low_variance_WAP <- sapply(variance, function(x){
(x>5)
})
which(low_variance_WAP, arr.ind = TRUE)
low_variance_WAP<- as.data.frame(low_variance_WAP)
indices2<-low_variance_WAP[,1]
trainingData1<- trainingData1[(indices2)]
#if WAP value is 100 change to -105
trainingData1 <- as.data.frame(apply(trainingData1[,c(1:430)], 2, function(x) {ifelse(x == 100, -105, x)}))
#find WAP values >-30 and <0
#high_value <- as.data.frame(sapply(trainingData1[,c(1:430)], function(x){ (x>=-30 & x<=0,  )})
#Check the means and sds of the WAPs
trainingData1_mean<-apply(trainingData1[,c(1:424)], 2, mean)
trainingData1_sd<-apply(trainingData1[,c(1:424)], 2, sd)
#plots
plot(trainingData1$USERID)
plot(trainingData1$USERID)
plot(trainingData1$PHONEID)
colnames(trainingData1)
if(require("pacman")=="FALSE"){
install.packages('pacman')
library('pacman')
pacman::p_load(here, readxl, plyr, caret, dplyr, doParallel,
lubridate, corrplot, ggplot2,
tidyverse, arules, arulesViz, rstudioapi,RMySQL,
plotly, padr, lubridate, forecast,zoo)
} else {
library('pacman')
pacman::p_load(here, readxl, plyr, caret, dplyr, doParallel,
lubridate, corrplot, ggplot2,
tidyverse, arules, arulesViz, rstudioapi,RMySQL,
plotly, padr, lubridate, forecast,zoo)
}
#Upload the files
trainingData<-read.csv(file="/Users/staceyjackson/Dropbox (Personal)/Ubiqum/May_2019_Wifi/Dataset/UJIndoorLoc/trainingData.csv", header=TRUE, sep=",")
validationData<-read.csv(file="/Users/staceyjackson/Dropbox (Personal)/Ubiqum/May_2019_Wifi/Dataset/UJIndoorLoc/validationData.csv", header=TRUE, sep=",")
#Look at the classes
str(trainingData)
sapply(trainingData, class)
#change 526-528 to factors
columns <- c(526:528)
trainingData[,columns] <- lapply(trainingData[,columns], as.factor)
validationData[,columns] <- lapply(validationData[,columns], as.factor)
sapply(trainingData,class)
sapply(validationData,class)
#change time to POSixt
trainingData$TIMESTAMP <- as.POSIXct(trainingData$TIMESTAMP,origin="1970-01-01")
validationData$TIMESTAMP <- as.POSIXct(validationData$TIMESTAMP,origin="1970-01-01")
#Some plots
plot(trainingData$BUILDINGID)
plot(trainingData$USERID)
plot(trainingData$SPACEID)
p <- ggplot(data = trainingData, mapping = aes(x =USERID, y=PHONEID))
p + geom_point()
p <- ggplot(data = validationData, mapping = aes(x =LONGITUDE, y=LATITUDE))
p + geom_point()
summary(trainingData[,523:529])
summary(validationData[,523:529])
#create new column for location in training set
trainingData$Location <- (trainingData$SPACEID*100 +trainingData$FLOOR*10 +trainingData$BUILDINGID)
#create new column for location in validaiton set
validationData$Location <- (validationData$SPACEID*100 +validationData$FLOOR*10 +validationData$BUILDINGID)
trainingData$Location<-(stringr::str_pad(trainingData$Location, 5, pad = "0"))
validationData$Location<-(stringr::str_pad(validationData$Location, 5, pad = "0"))
#find means of the WAPs
trainingDataMEAN <- 0
for (col in 1:522) {
trainingDataMEAN[col] <- mean(trainingData[,col])
}
trainingDataMEAN <- as.data.frame(trainingDataMEAN)
#remove WAPs with mean=100
trainingData1<-trainingData[,-c(3,4,92,93,94,95,152,158,159,160,215,217,226,227,238,239,240,241,242,243,244,245,246,247,254,293,296,301,303,304,307,333,349,353,360,365,416,419,423,429,433,438,441,442,444,445,451,458,482,485,487,488,491,497,520)]
#Empty the no WAPs means (location, phoneID...)
#means[1:11]<-0
#means<-as.data.frame(means)
#can also be done with the function apply
#means<-apply(training[11:530], 2, mean)
#means<-as.data.frame(means)
#delete all the WAPs with a mean of =100
#indices<-c()
#for (i in 11:530){
# if(means[i,]==100){
#   indices[i]<- i
# }
#}
#training2<- training[is.na(indices)]
#find phones with weak signals
phones <- split(trainingData1, trainingData1$PHONEID)
sapply(phones, function(x) {
colMeans(x[, c(1:50)])
})
#variance of the phones
sapply(phones, var)
#WAPs with low variance
variance <- sapply(trainingData1[,c(1:430)], var)
low_variance_WAP <- sapply(variance, function(x){
(x>5)
})
which(low_variance_WAP, arr.ind = TRUE)
low_variance_WAP<- as.data.frame(low_variance_WAP)
indices2<-low_variance_WAP[,1]
trainingData1<- trainingData1[(indices2)]
#if WAP value is 100 change to -105
trainingData1 <- as.data.frame(apply(trainingData1, 2, function(x) {ifelse(x == 100, -105, x)}))
#find WAP values >-30 and <0
#high_value <- as.data.frame(sapply(trainingData1[,c(1:430)], function(x){ (x>=-30 & x<=0,  )})
#Check the means and sds of the WAPs
trainingData1_mean<-apply(trainingData1[,c(1:424)], 2, mean)
trainingData1_sd<-apply(trainingData1[,c(1:424)], 2, sd)
#plots
plot(trainingData1$USERID)
plot(trainingData1$PHONEID)
p <- ggplot(data=trainingData1, mapping=aes(x=USERID, y=PHONEID))
p + geom_point()
p <- ggplot(data=trainingData1, mapping=aes(x=USERID, y=BUILDINGID))
p + geom_point()
#plot of all three buildings' longitude & latitude showing each floor
P<-ggplot(trainingData1, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
#create separate training datasets for each building and plot longitude & latitude showing each floor
trainingDataBuilding0<-trainingData1%>%
filter(BUILDINGID==0)
P<-ggplot(trainingDataBuilding0, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
trainingDataBuilding1<-trainingData1%>%
filter(BUILDINGID==1)
P<-ggplot(trainingDataBuilding1, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
trainingDataBuilding2<-trainingData1%>%
filter(BUILDINGID==2)
P<-ggplot(trainingDataBuilding2, mapping=aes(x=LONGITUDE, y=LATITUDE, colour=FLOOR))
P+geom_point()
#Upload the files
trainingData<-read.csv(file="/Users/staceyjackson/Dropbox (Personal)/Ubiqum/May_2019_Wifi/Dataset/UJIndoorLoc/trainingData.csv", header=TRUE, sep=",")
validationData<-read.csv(file="/Users/staceyjackson/Dropbox (Personal)/Ubiqum/May_2019_Wifi/Dataset/UJIndoorLoc/validationData.csv", header=TRUE, sep=",")
#Look at the classes
str(trainingData)
sapply(trainingData, class)
#change 526-528 to factors
columns <- c(526:528)
trainingData[,columns] <- lapply(trainingData[,columns], as.factor)
validationData[,columns] <- lapply(validationData[,columns], as.factor)
sapply(trainingData,class)
sapply(validationData,class)
#change time to POSixt
trainingData$TIMESTAMP <- as.POSIXct(trainingData$TIMESTAMP,origin="1970-01-01")
validationData$TIMESTAMP <- as.POSIXct(validationData$TIMESTAMP,origin="1970-01-01")
#Some plots
plot(trainingData$BUILDINGID)
plot(trainingData$USERID)
plot(trainingData$SPACEID)
p <- ggplot(data = trainingData, mapping = aes(x =USERID, y=PHONEID))
p + geom_point()
p <- ggplot(data = validationData, mapping = aes(x =LONGITUDE, y=LATITUDE))
p + geom_point()
summary(trainingData[,523:529])
summary(validationData[,523:529])
#create new column for location in training set
trainingData$Location <- (trainingData$SPACEID*100 +trainingData$FLOOR*10 +trainingData$BUILDINGID)
#create new column for location in validaiton set
validationData$Location <- (validationData$SPACEID*100 +validationData$FLOOR*10 +validationData$BUILDINGID)
trainingData$Location<-(stringr::str_pad(trainingData$Location, 5, pad = "0"))
validationData$Location<-(stringr::str_pad(validationData$Location, 5, pad = "0"))
#find means of the WAPs
trainingDataMEAN <- 0
for (col in 1:522) {
trainingDataMEAN[col] <- mean(trainingData[,col])
}
trainingDataMEAN <- as.data.frame(trainingDataMEAN)
#remove WAPs with mean=100
trainingData1<-trainingData[,-c(3,4,92,93,94,95,152,158,159,160,215,217,226,227,238,239,240,241,242,243,244,245,246,247,254,293,296,301,303,304,307,333,349,353,360,365,416,419,423,429,433,438,441,442,444,445,451,458,482,485,487,488,491,497,520)]
#Empty the no WAPs means (location, phoneID...)
#means[1:11]<-0
#means<-as.data.frame(means)
#can also be done with the function apply
#means<-apply(training[11:530], 2, mean)
#means<-as.data.frame(means)
#delete all the WAPs with a mean of =100
#indices<-c()
#for (i in 11:530){
# if(means[i,]==100){
#   indices[i]<- i
# }
#}
#training2<- training[is.na(indices)]
#find phones with weak signals
phones <- split(trainingData1, trainingData1$PHONEID)
sapply(phones, function(x) {
colMeans(x[, c(1:50)])
})
#variance of the phones
sapply(phones, var)
#WAPs with low variance
variance <- sapply(trainingData1[,c(1:430)], var)
low_variance_WAP <- sapply(variance, function(x){
(x>5)
})
which(low_variance_WAP, arr.ind = TRUE)
low_variance_WAP<- as.data.frame(low_variance_WAP)
indices2<-low_variance_WAP[,1]
trainingData1<- trainingData1[(indices2)]
colnames(trainingData1)
variance <- sapply(trainingData1[,c(1:433)], var)
low_variance_WAP <- sapply(variance, function(x){
(x>5)
})
which(low_variance_WAP, arr.ind = TRUE)
low_variance_WAP<- as.data.frame(low_variance_WAP)
indices2<-low_variance_WAP[,1]
trainingData1<- trainingData1[(indices2)]
trainingData1<- trainingData1[(indices2)]
variance <- sapply(trainingData1[,c(1:433)], var)
low_variance_WAP <- sapply(variance, function(x){
(x>5)
})
which(low_variance_WAP, arr.ind = TRUE)
low_variance_WAP<- as.data.frame(low_variance_WAP)
indices2<-low_variance_WAP[,1]
trainingData1<- trainingData1[(indices2)]
trainingData1
colnames(trainingData1)
#if WAP value is 100 change to -105
change_WAP_value <- apply(trainingData1[,c(1:427)], 2, function(x) {ifelse(x == 100, -105, x)})
change_WAP_value
high_value <- sapply(trainingData1[,c(1:430)], function(x){
(x>=-30 & x<=0)})
colnames(high_value)
plot(trainingData1$USERID)
trainingDataBuilding0<-trainingData1%>%
filter(BUILDINGID==0)
colnames(trainingData1)
trainingData<-read.csv(file="/Users/staceyjackson/Dropbox (Personal)/Ubiqum/May_2019_Wifi/Dataset/UJIndoorLoc/trainingData.csv", header=TRUE, sep=",")
validationData<-read.csv(file="/Users/staceyjackson/Dropbox (Personal)/Ubiqum/May_2019_Wifi/Dataset/UJIndoorLoc/validationData.csv", header=TRUE, sep=",")
columns <- c(526:528)
trainingData[,columns] <- lapply(trainingData[,columns], as.factor)
validationData[,columns] <- lapply(validationData[,columns], as.factor)
trainingData$TIMESTAMP <- as.POSIXct(trainingData$TIMESTAMP,origin="1970-01-01")
validationData$TIMESTAMP <- as.POSIXct(validationData$TIMESTAMP,origin="1970-01-01")
trainingDataMEAN <- 0
for (col in 1:522) {
trainingDataMEAN[col] <- mean(trainingData[,col])
}
trainingDataMEAN <- as.data.frame(trainingDataMEAN)
#remove WAPs with mean=100
trainingData1<-trainingData[,-c(3,4,92,93,94,95,152,158,159,160,215,217,226,227,238,239,240,241,242,243,244,245,246,247,254,293,296,301,303,304,307,333,349,353,360,365,416,419,423,429,433,438,441,442,444,445,451,458,482,485,487,488,491,497,520)]
#if WAP value is 100 change to -105
change_WAP_value <- apply(trainingData1[,c(1:427)], 2, function(x) {ifelse(x == 100, -105, x)})
colnames(trainingData1)
#Check the means and sds of the WAPs
trainingData1_mean<-apply(trainingData1[,c(1:427)], 2, mean)
trainingData1_sd<-apply(trainingData1[,c(1:427)], 2, sd)
plot(trainingData1[,c(1:427)], 2, mean)
#Check the means and sds of the WAPs
trainingData1_mean<-apply(trainingData1[,c(1:427)], 2, mean)
trainingData1_mean
